geom_point() +
geom_hline(yintercept = 0) +
labs(title='Residual vs. Fitted Values Plot', x='Fitted Values', y='Residuals')
summary(lin.mod.pop)
## created linear model of EPI.new = a(population_log) + b
lin.mod.mpenew <- lm(MPE.new~population_log,epi.results.sub)
## read data
populations_2023 <- read.csv("~/RPI/Coterm_Fall_2024/Data_Analytics/Michael-Dong-Data-Analytics/Lab2/countries_populations_2023.csv")
## drop country populations that don't exist in epi results
populations <- populations_2023[-which(!populations_2023$Country %in% epi.results$country),]
## sort populations by country name
populations <- populations[order(populations$Country),]
## drop country results that don't exist in populations
epi.results.sub <- epi.results[-which(!epi.results$country %in% populations$Country),]
## sort results by country name
epi.results.sub <- epi.results.sub[order(epi.results.sub$country),]
## only keep relevant columns
epi.results.sub <- epi.results.sub[,c("country","MPE.old","MPE.new")]
## convert to numeric
epi.results.sub$population <- as.numeric(populations$Population)
## compute population log
epi.results.sub$population_log <- log10(epi.results.sub$population)
boxplot(epi.results.sub$population_log)
attach(epi.results.sub)
## created linear model of EPI.new = a(population_log) + b
lin.mod.mpenew <- lm(MPE.new~population_log,epi.results.sub)
plot(MPE.new~population_log)
abline(lin.mod.mpenew)
summary(lin.mod.mpenew)
plot(lin.mod.mpenew)
lin.mod.pop <- lm(population_log~MPE.new,epi.results.sub)
plot(population_log~MPE.old)
abline(lin.mod.pop)
summary(lin.mod.pop)
plot(lin.mod.pop)
## created linear model of EPI.new = a(population_log) + b
lin.mod.mpenew <- lm(MPE.new~population_log,epi.results.sub)
plot(MPE.new~population_log)
abline(lin.mod.mpenew)
summary(lin.mod.mpenew)
plot(lin.mod.mpenew)
lin.mod.mpenew <- lm(MPE.new~population_log,epi.results.sub)
plot(MPE.new~population_log)
abline(lin.mod.mpenew)
summary(lin.mod.mpenew)
plot(lin.mod.mpenew)
### set working directory
setwd("~/RPI/Coterm_Fall_2024/Data_Analytics/Michael-Dong-Data-Analytics/Lab2/")
### read in data
epi.results <- read.csv("epi2024results06022024.csv", header=TRUE)
epi.weights <- read.csv("epi2024weights.csv")
View(epi.results)
View(epi.weights)
#### Exploratory Analysis ####
epi.results$EPI.new
epi.results[1,5]
attach(epi.results)
EPI.new
EPI.new[1]
## NA values
na.indices <- is.na(EPI.new)
## drop NAs
Epi.new.compl <- EPI.new[!na.indices]
## convert to data frame and add country
Epi.new.compl <- data.frame(Country = country[!na.indices], EPI = EPI.new[!na.indices])
## summary stats
summary(EPI.new)
fivenum(EPI.new,na.rm=TRUE)
## histograms
hist(EPI.new)
hist(EPI.new, seq(20., 80., 2.0), prob=TRUE)
rug(EPI.new)
lines(density(EPI.new,na.rm=TRUE,bw=1))
lines(density(EPI.new,na.rm=TRUE,bw="SJ"))
x <- seq(20., 80., 1.0)
qn<- dnorm(x,mean=42, sd=5,log=FALSE)
lines(x,0.4*qn)
qn<- dnorm(x,mean=65, sd=5,log=FALSE)
lines(x,0.12*qn)
boxplot(MPE.new, MKP.new, BDH.new, names=c("MPE.new","MKP.new", "BDH.new"))
### Quantile-quantile plots
qqnorm(EPI.new)
qqline(EPI.new)
x <- seq(20., 80., 1.0)
qqplot(qnorm(ppoints(200)), x)
qqline(x)
qqplot(rnorm(1000),MPE.new)
qqline(MPE.new)
qqplot(rnorm(1000),MKP.new)
qqline(MKP.new)
qqplot(rnorm(1000),BDH.new)
qqline(BDH.new)
qqplot(rnorm(1000),MPE.new)
qqline(MPE.new)
qqplot(rnorm(1000),MKP.new)
qqline(MKP.new)
qqplot(rnorm(1000),BDH.new)
qqline(BDH.new)
d1 <- rnorm(10000)
d2 <- rnorm(10000)
qqplot(d1,d1)
qqline(d1)
### Empirical Cumulative Distribution Function
plot(ecdf(EPI.new), do.points=FALSE)
plot(ecdf(rnorm(1000, 45, 10)), do.points=FALSE, main="Norm Dist vs. EPI.new ECDF")
lines(ecdf(EPI.new))
plot(ecdf(MPE.new), do.points=FALSE, col="blue", main="MPE.new vs MKP.new vs BDH.new ECDF")
lines(ecdf(MKP.new), do.points=FALSE, col = "red")
lines(ecdf(BDH.new), do.points=FALSE, col="green")
## read data
populations_2023 <- read.csv("~/RPI/Coterm_Fall_2024/Data_Analytics/Michael-Dong-Data-Analytics/Lab2/countries_populations_2023.csv")
## drop country populations that don't exist in epi results
populations <- populations_2023[-which(!populations_2023$Country %in% epi.results$country),]
## sort populations by country name
populations <- populations[order(populations$Country),]
## drop country results that don't exist in populations
epi.results.sub <- epi.results[-which(!epi.results$country %in% populations$Country),]
## sort results by country name
epi.results.sub <- epi.results.sub[order(epi.results.sub$country),]
## only keep relevant columns
epi.results.sub <- epi.results.sub[,c("country","MPE.old","MPE.new")]
## convert to numeric
epi.results.sub$population <- as.numeric(populations$Population)
## compute population log
epi.results.sub$population_log <- log10(epi.results.sub$population)
boxplot(epi.results.sub$population_log)
attach(epi.results.sub)
## created linear model of EPI.new = a(population_log) + b
lin.mod.mpenew <- lm(MPE.new~population_log,epi.results.sub)
plot(MPE.new~population_log)
abline(lin.mod.mpenew)
summary(lin.mod.mpenew)
plot(lin.mod.mpenew)
iris
iris.df <- iris
?naiveBayes
classifier <- naiveBayes(iris[,1:4], iris[,5])
classifier
prediction <- predict(classifier, iris[,-5])
prediction
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$Petal.Length
plot(function(x) dnorm(x, 1.462, 0.1736640), 0, 8, col="red", main="Petal length distribution for the 3 different species")
curve(dnorm(x, 4.260, 0.4699110), add=TRUE, col="blue")
curve(dnorm(x, 5.552, 0.5518947 ), add=TRUE, col = "green")
library(rpart)
library(rpart.plot)
dim(iris)
s_iris <- sample(150,100)
s_iris
iris_train <-iris[s_iris,]
iris_test <-iris[-s_iris,]
dim(iris_test)
dim(iris_train)
?rpart
dectionTreeModel <- rpart(Species~., iris_train, method = "class")
dectionTreeModel
rpart.plot(dectionTreeModel)
abalone <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"), header = FALSE, sep = ",")
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(-1,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
z <- abalone
aba <- abalone
aba$sex <- NULL
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x))) }
aba[1:7] <- as.data.frame(lapply(aba[1:7], normalize))
summary(aba$shucked_wieght)
ind <- sample(2, nrow(aba), replace=TRUE, prob=c(0.7, 0.3))
KNNtrain <- aba[ind==1,]
KNNtest <- aba[ind==2,]
sqrt(2918)
library(class)
KNNpred <- knn(train = KNNtrain[1:7], test = KNNtest[1:7], cl = KNNtrain$rings, k = 55)
KNNpred
table(KNNpred,KNNtest$rings)
insta
library("e1071")
classifier <- naiveBayes(iris[,1:4], iris[,5])
prediction <- predict(classifier, iris[,-5])
library("e1071")
classifier <- naiveBayes(iris[,1:4], iris[,5])
prediction <- predict(classifier, iris[,-5])
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier$tables$Petal.Length
plot(function(x) dnorm(x, 1.462, 0.1736640), 0, 8, col="red", main="Petal length distribution for the 3 different species")
curve(dnorm(x, 4.260, 0.4699110), add=TRUE, col="blue")
curve(dnorm(x, 5.552, 0.5518947 ), add=TRUE, col = "green")
setwd("C:/Users/dongm2/Downloads")
setwd("C:/Users/dongm2/Documents/RPI/Coterm_Fall_2024/Data_Analytics/Michael-Dong-Data-Analytics/Lab2p2")
setwd("~/RPI/Coterm_Fall_2024/Data_Analytics/Michael-Dong-Data-Analytics/Lab2p2")
library("e1071")
iris
iris.df <- iris
classifier <- naiveBayes(iris[,1:4], iris[,5])
prediction <- predict(classifier, iris[,-5])
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier$tables$Petal.Length
plot(function(x) dnorm(x, 1.462, 0.1736640), 0, 8, col="red", main="Petal length distribution for the 3 different species")
curve(dnorm(x, 4.260, 0.4699110), add=TRUE, col="blue")
curve(dnorm(x, 5.552, 0.5518947 ), add=TRUE, col = "green")
library(rpart)
library(rpart.plot)
dim(iris)
abalone <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"), header = FALSE, sep = ",")
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(-1,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
z <- abalone
aba <- abalone
aba$sex <- NULL
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x))) }
aba[1:7] <- as.data.frame(lapply(aba[1:7], normalize))
summary(aba$shucked_wieght)
ind <- sample(2, nrow(aba), replace=TRUE, prob=c(0.7, 0.3))
KNNtrain <- aba[ind==1,]
KNNtest <- aba[ind==2,]
?naiveBayes
iris
iris.df <- iris
classifier <- naiveBayes(iris[,1:4], iris[,5])
prediction <- predict(classifier, iris[,-5])
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier <- naiveBayes(iris[,1:4], iris[,5])
prediction <- predict(classifier, iris[,-5])
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$Petal.Length
?df
iris.df <- iris
iris.df
abalone <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"), header = FALSE, sep = ",")
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone <- read.csv(url("/abalone.data"), header = FALSE, sep = ",")
abalone <- read.csv(url("\abalone.data"), header = FALSE, sep = ",")
abalone <- read.csv(url("abalone.data"), header = FALSE, sep = ",")
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
abalone
z <- abalone
aba <- abalone
aba$sex <- NULL
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x))) }
library("e1071")
iris
iris.df <- iris
classifier <- naiveBayes(iris[,1:4], iris[,5])
classifier
prediction <- predict(classifier, iris[,-5])
prediction
table(prediction, iris[,5], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$Petal.Length
?prediction
help(prediction)
?predict
?naiveBayes
classifier <- naiveBayes(iris[,1:4], iris[,6])
classifier <- naiveBayes(iris[,1:5], iris[,5])
classifier
prediction <- predict(classifier, iris[,-5])
iris
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
?cut
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
?as
aba
plot(function(x) dnorm(x, 1.462, 0.1736640), 0, 8, col="red", main="Petal length distribution for the 3 different species")
curve(dnorm(x, 4.260, 0.4699110), add=TRUE, col="blue")
curve(dnorm(x, 5.552, 0.5518947 ), add=TRUE, col = "green")
?dnorm
classifier$tables$Petal.Length
iris.df <- iris
iris
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone.norm <- abalone[,-1]
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age_group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone.norm <- abalone[,-1]
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.numeric(abalone$rings)
abalone$rings <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
#abalone$rings <- as.numeric(abalone$rings)
#abalone$rings <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$rings <- as.factor(abalone$rings)
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone$sex
abalone$length
abalone
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone.norm <- abalone[,-1]
abalone
classifier$tables$Petal.Length
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,c("age.group")])
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone.norm <- abalone[,-1]
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,c("age.group")])
classifier
prediction <- predict(classifier, abalone[,c("age.group")])
prediction
abalone <- read.csv("abalone.data", header = FALSE, sep = ",")
abalone
colnames(abalone) <- c("sex", "length", 'diameter', 'height', 'whole_weight', 'shucked_wieght', 'viscera_wieght', 'shell_weight', 'rings' )
abalone
abalone$age.group <- cut(abalone$rings, br=c(0,8,11,35), labels = c("young", 'adult', 'old'))
abalone.norm <- abalone[,-1]
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,c("age.group")])
classifier
prediction <- predict(classifier, iris[,-9])
prediction
prediction <- predict(classifier, iris[,-3])
prediction <- predict(classifier, iris[,-5])
prediction <- predict(classifier, iris[,-1])
prediction <- predict(classifier, iris[,-2])
prediction <- predict(classifier, iris[,-4])
#####################
classifier <- naiveBayes(abalone[,1:3], iris[,10])
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,10])
View(classifier)
View(classifier)
classifier
prediction <- predict(classifier, abalone[,-10])
prediction
prediction
table(prediction, abalone[,10], dnn=list('predicted','actual'))
View(classifier)
View(classifier)
classifier$apriori
classifier$tables$length
classifier$tables$sex
?naiveBayes
classifier <- naiveBayes(iris[,1:4], iris[,5])
classifier
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,10])
classifier
prediction
table(prediction, abalone[,10], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$length
classifier$tables$sex
plot(function(x) dnorm(x, 0.4209915, 0.11137474), 0, 8, col="red", main="Abalone length distribution for the 3 different species")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), 0, 5, col="red", main="Abalone length distribution for the 3 different species")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), 0, 5, col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), 0, 1, col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
?plot
help(plot)
plot(function(x) dnorm(x, 0.4209915, 0.11137474), 0, 1, 0, 3, col="red", main="Abalone length distribution for the 3 different ages")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=(0, 1), ylim=(0,1), col="red", main="Abalone length distribution for the 3 different ages")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,1), col="red", main="Abalone length distribution for the 3 different ages")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,20), col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,7), col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,6), col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
View(abalone)
#####################
classifier <- naiveBayes(abalone[,1:3], abalone[,10])
classifier
prediction <- predict(classifier, abalone[,1:3])
prediction
table(prediction, abalone[,10], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$length
classifier$tables$sex
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone length distribution for the 3 different ages")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone length distribution for the 3 different ages [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone length distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644 ), add=TRUE, col = "green")
classifier$tables$diameter
classifier$tables$diameter
plot(function(x) dnorm(x, 0.3212758, 0.09029187), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.4458591, 0.07153798), add=TRUE, col="blue")
curve(dnorm(x, 0.4632083, 0.06699741), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.3212758, 0.09029187), xlim=c(0, 1), ylim=c(0,10), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.4458591, 0.07153798), add=TRUE, col="blue")
curve(dnorm(x, 0.4632083, 0.06699741), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.3212758, 0.09029187), xlim=c(0, 1), ylim=c(0,7), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.4458591, 0.07153798), add=TRUE, col="blue")
curve(dnorm(x, 0.4632083, 0.06699741), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.3212758, 0.09029187), xlim=c(0, .8), ylim=c(0,7), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.4458591, 0.07153798), add=TRUE, col="blue")
curve(dnorm(x, 0.4632083, 0.06699741), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.4209915, 0.11137474), xlim=c(0, 1), ylim=c(0,5), col="red", main="Abalone length distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.5707182, 0.08740980), add=TRUE, col="blue")
curve(dnorm(x, 0.5868542, 0.08100644), add=TRUE, col = "green")
classifier$tables$diameter
plot(function(x) dnorm(x, 0.3212758, 0.09029187), xlim=c(0, .8), ylim=c(0,7), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.4458591, 0.07153798), add=TRUE, col="blue")
curve(dnorm(x, 0.4632083, 0.06699741), add=TRUE, col = "green")
######################
z <- abalone
classifier$tables$height
classifier
classifier$tables$sex
#####################
classifier <- naiveBayes(abalone[,2:4], abalone[,10])
classifier
prediction <- predict(classifier, abalone[,2:4])
classifier$tables$height
classifier$tables$height
plot(function(x) dnorm(x, 0.1065956, 0.04183039), xlim=c(0, .8), ylim=c(0,7), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.1516906, 0.02984784), add=TRUE, col="blue")
curve(dnorm(x, 0.1648125, 0.02935998), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.1065956, 0.04183039), xlim=c(0, .4), ylim=c(0,15), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.1516906, 0.02984784), add=TRUE, col="blue")
curve(dnorm(x, 0.1648125, 0.02935998), add=TRUE, col = "green")
plot(function(x) dnorm(x, 0.1065956, 0.04183039), xlim=c(0, .3), ylim=c(0,15), col="red", main="Abalone diameter distribution [red=young, blue=adult, green=old]")
curve(dnorm(x, 0.1516906, 0.02984784), add=TRUE, col="blue")
curve(dnorm(x, 0.1648125, 0.02935998), add=TRUE, col = "green")
######################
classifier2 <- naiveBayes(abalone[,5:6], abalone[,10])
classifier2
prediction2 <- predict(classifier2, abalone[,5:6])
prediction2
table(prediction2, abalone[,10], dnn=list('predicted','actual'))
######################
classifier3 <- naiveBayes(abalone[,7:8], abalone[,10])
classifier3
prediction3 <- predict(classifier3, abalone[,7:8])
prediction3
table(prediction3, abalone[,10], dnn=list('predicted','actual'))
######################
classifier2 <- naiveBayes(abalone[,4:6], abalone[,10])
classifier2
prediction2 <- predict(classifier2, abalone[,4:6])
prediction2
table(prediction2, abalone[,10], dnn=list('predicted','actual'))
